
# Create user configuration file
hxx{catch2/catch_user_config}: in{catch2/catch_user_config.hpp.in}

# Support for DLLs on windows - Auto export all symbols
lib{catch2}: libul{catch2}: {hxx cxx}{** -catch2/internal/catch_main} hxx{catch2/catch_user_config}
lib{catch2}: def{catch2}: include = ($cxx.target.system == 'win32-msvc')
def{catch2}: libul{catch2}

# Is this really needed for main function?
# lib{catch2wmain}: libul{catch2wmain}: catch2/internal/cxx{catch_main} lib{catch2}
# lib{catch2wmain}: def{catch2wmain}: include = ($cxx.target.system == 'win32-msvc')
# def{catch2wmain}: libul{catch2wmain}
liba{catch2wmain}: catch2/internal/cxx{catch_main} lib{catch2}


# Build options.
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/
cxx.poptions =+ "-I$src_pfx_src" "-I$out_pfx_src"
if($config.catch2.reproducible_build == true && ($cxx.target.class == "gcc" || $cxx.target.class == "clang"))
{
  cxx.coptions += "-ffile-prefix-map=$src_root/="
}
cxx.export.poptions += "-I$src_pfx_src" "-I$out_pfx_src" 

if($cxx.target.system == 'mingw32')
  cxx.loptions += -Wl,--export-all-symbols

obja{*}: cxx.poptions += -DCATCH_CONFIG_STATIC
objs{*}: cxx.poptions += -DCATCH_CONFIG_SHARED_LIBRARY -DCatch2_EXPORTS

libs{catch2}: cxx.export.poptions += -DCATCH_CONFIG_SHARED_LIBRARY
liba{catch2}: cxx.export.poptions += -DCATCH_CONFIG_STATIC

# if($cxx.target.system == 'win32-msvc')
# {
#   lib{catch2wmain}: cxx.export.loptions += "/INCLUDE:main"
#   lib{catch2wmain}: cxx.pkgconfig.lib += "/INCLUDE:main"
# }

liba{catch2wmain}:
{
  cxx.export.poptions += -DCATCH2_BUILD_STATIC_WITH_MAIN
  bin.whole = true
}

./: lib{catch2} liba{catch2wmain}


# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{catch2*}: bin.lib.version = "-$version.project_id"
else
  lib{catch2*}: bin.lib.version = "-$version.major.$version.minor"

hxx{*}:
{
  install = include/
  install.subdirs = true
}
